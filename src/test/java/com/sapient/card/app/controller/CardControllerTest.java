package com.sapient.card.app.controller;
/*
 *  Created by Girish Kumar CH on 7/2/21
 */

import com.sapient.card.app.constants.Errors;
import com.sapient.card.app.dto.Card;
import com.sapient.card.app.repository.CardRepository;
import com.sapient.card.app.repository.entity.CardEntity;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.r2dbc.core.DatabaseClient;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.reactive.server.WebTestClient;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import java.util.Arrays;
import java.util.List;
import java.util.Objects;

import static org.junit.jupiter.api.Assertions.assertTrue;

@ExtendWith(SpringExtension.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@DirtiesContext
@AutoConfigureWebTestClient
@ActiveProfiles("test")
@Slf4j
public class CardControllerTest {

    @Autowired
    private WebTestClient webTestClient;

    @Autowired
    private CardRepository cardRepository;

    @Autowired
    private DatabaseClient databaseClient;

    @BeforeEach
    public  void setup(){
        List<String> queries = Arrays.asList("DROP TABLE IF EXISTS cards ;",
                "CREATE TABLE cards (\n" +
                        "id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n" +
                        "name VARCHAR(100) NOT NULL,\n" +
                        "number VARCHAR(100) NOT NULL,\n" +
                        "card_limit DOUBLE,\n" +
                        "UNIQUE KEY cards_unique_number (number)\n" +
                        ");");

        queries.forEach(query -> databaseClient.sql(query)
                .fetch()
                .rowsUpdated()
                .block());


        cardRepository.deleteAll()
                .thenMany(Flux.just(new CardEntity(null, "TestCard" , "49927398716" , 0.0 ) ,new CardEntity(null, "TestCard2" , "79927398713" , 0.0 ) ))
                .flatMap(cardRepository :: save)
                .blockLast();

    }

    @Test
    public void testCreateCard(){
        Card card = new Card(null, "TestCard" , "69928398713" , 0.9 );
        webTestClient.post().uri("/v1/cards").contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
                .body(Mono.just(card),Card.class)
                .exchange()
                .expectStatus().isCreated()
                .expectBody()
                .jsonPath("$.id").isNotEmpty()
                .jsonPath("$.name").isEqualTo("TestCard")
                .jsonPath("$.limit").isEqualTo(0.0);
    }

    @Test
    public void testFailCreateCardWhenExistedCardNumber(){
        Card card = new Card(null, "TestCard" , "49927398716" , 0.9 );
        webTestClient.post().uri("/v1/cards").contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
                .body(Mono.just(card),Card.class)
                .exchange()
                .expectStatus().isBadRequest()
                .expectBody()
                .jsonPath("$.statusCode").isEqualTo(Errors.CARD_NUMBER_EXISTED.getCode())
                .jsonPath("$.statusMessage").isEqualTo(Errors.CARD_NUMBER_EXISTED.getMessage());
    }

    @Test
    public void testFailCreateCardWhenInvalidCardNumber(){
        Card card = new Card(null, "TestCard" , "39927398716" , 0.9 );
        webTestClient.post().uri("/v1/cards").contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
                .body(Mono.just(card),Card.class)
                .exchange()
                .expectStatus().isBadRequest()
                .expectBody()
                .jsonPath("$.statusCode").isEqualTo(Errors.VALIDATION_INVALID_CARD_NUMBER.getCode())
                .jsonPath("$.statusMessage").isEqualTo(Errors.VALIDATION_INVALID_CARD_NUMBER.getMessage());
    }

    @Test
    public void testFailCreateCardWhenAlphaNumericCardNumber(){
        Card card = new Card(null, "TestCard" , "399273fgfd98716" , 0.9 );
        webTestClient.post().uri("/v1/cards").contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
                .body(Mono.just(card),Card.class)
                .exchange()
                .expectStatus().isBadRequest()
                .expectBody()
                .jsonPath("$.statusCode").isEqualTo(Errors.VALIDATION_INVALID_CARD_NUMBER_NUMERIC.getCode())
                .jsonPath("$.statusMessage").isEqualTo(Errors.VALIDATION_INVALID_CARD_NUMBER_NUMERIC.getMessage());
    }

    @Test
    public void testFailCreateCardWhenInvalidCardNumberLength(){
        Card card = new Card(null, "TestCard" , "92445678912345678911" , 0.9 );
        webTestClient.post().uri("/v1/cards").contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
                .body(Mono.just(card),Card.class)
                .exchange()
                .expectStatus().isBadRequest()
                .expectBody()
                .jsonPath("$.statusCode").isEqualTo(Errors.VALIDATION_INVALID_CARD_NUMBER_LENGTH.getCode())
                .jsonPath("$.statusMessage").isEqualTo(Errors.VALIDATION_INVALID_CARD_NUMBER_LENGTH.getMessage());
    }

    @Test
    public void testFailCreateCardWhenBlankName(){
        Card card = new Card(null, "" , "69928398713" , 0.9 );
        webTestClient.post().uri("/v1/cards").contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
                .body(Mono.just(card),Card.class)
                .exchange()
                .expectStatus().isBadRequest()
                .expectBody()
                .jsonPath("$.statusCode").isEqualTo(Errors.INVALID_MSG.getCode())
                .jsonPath("$.statusMessage").isEqualTo(Errors.INVALID_MSG.getMessage());
    }

    @Test
    public void testGetAllCardsCount(){
        webTestClient.get().uri("/v1/cards").exchange()
                .expectStatus().isOk()
                .expectHeader().contentType(MediaType.APPLICATION_JSON_VALUE)
                .expectBodyList(Card.class)
                .hasSize(2)
                .consumeWith(card ->{
                    List<Card> cards = card.getResponseBody();
                    cards.forEach( c -> assertTrue(Objects.nonNull(c.getId()) ));

                });
    }

    @Test
    public void testGetAllUsersResponse(){
        Flux<Card> cardFlux = webTestClient.get().uri("/v1/cards").exchange()
                .expectStatus().isOk()
                .expectHeader().contentType(MediaType.APPLICATION_JSON_VALUE)
                .returnResult(Card.class)
                .getResponseBody();
        StepVerifier.create(cardFlux.log("Card values !!!"))
                .expectNextCount(2)
                .verifyComplete();

    }


}
